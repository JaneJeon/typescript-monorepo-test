import * as z from 'zod'
import normalizeUrl from 'normalize-url'
import isURL from 'validator/lib/isURL.js' // can't use /es/lib tree-shakeable import...
// See: https://github.com/validatorjs/validator.js/issues/1581
// and https://github.com/validatorjs/validator.js/issues/1759

export const NonEmptyString = z.string().trim().min(1)

export const NormalizedURL = NonEmptyString.transform(val =>
  normalizeUrl(val)
).refine(val =>
  isURL(val, { protocols: ['http', 'https'], require_protocol: true })
)

export const CoercedBoolean = z
  .string()
  .optional()
  .default('false') // for boolean options, the absence should always be negative
  .transform((val, ctx) => {
    if (val === 'true') return true
    if (val === 'false') return false

    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: 'Invalid Boolean value'
    })

    return z.NEVER
  })

// Don't allow extra fields at all
export const StrictObject = z.object({}).strict()

// Strip extra fields
export const StripObject = z.object({}).strip()

// "Initial"/"Autogenerated" values need to be set in the model, not the schema,
// because we don't ever want the user to be setting these,
// so the values will always be empty.
export const BaseModel = StrictObject.extend({
  createdAt: z
    .string()
    .datetime()
    .describe(
      'An ISO timestamp string indicating when the object was created. Do not set directly.'
    ),
  updatedAt: z
    .string()
    .datetime()
    .describe(
      'An ISO timestamp string indicating when the object was updated. Do not set directly.'
    )
})
