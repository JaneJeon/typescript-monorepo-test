/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * SampleApi
 * Sample backend service
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse } from 'axios'
export type DeleteUsersIdParams = {
  not?: unknown
  hardDelete?: string
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type PatchUsersId200Role =
  (typeof PatchUsersId200Role)[keyof typeof PatchUsersId200Role]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchUsersId200Role = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The updated user details
 */
export type PatchUsersId200 = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: PatchUsersId200Role
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type PatchUsersIdBodyRole =
  (typeof PatchUsersIdBodyRole)[keyof typeof PatchUsersIdBodyRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchUsersIdBodyRole = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The shape of a User object
 */
export type PatchUsersIdBody = {
  /** The username that is provided by the user. */
  name?: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: PatchUsersIdBodyRole
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type GetUsersId200Role =
  (typeof GetUsersId200Role)[keyof typeof GetUsersId200Role]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersId200Role = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The user with the matching id
 */
export type GetUsersId200 = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: GetUsersId200Role
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type GetUsers200ItemRole =
  (typeof GetUsers200ItemRole)[keyof typeof GetUsers200ItemRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsers200ItemRole = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The shape of a User object
 */
export type GetUsers200Item = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: GetUsers200ItemRole
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

export type GetUsersRole = (typeof GetUsersRole)[keyof typeof GetUsersRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersRole = {
  user: 'user',
  superuser: 'superuser'
} as const

export type GetUsersParams = {
  /**
   * The user ID (that is auto-generated from the backend).
   */
  id?: string
  /**
   * The username that is provided by the user.
   */
  name?: string
  /**
   * The role for the user. Note that superuser status can only be set by another superuser/admin.
   */
  role?: GetUsersRole
  /**
   * Deleted users will be marked with the `deactivated` flag. Do not set directly.
   */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type PostUsers201Role =
  (typeof PostUsers201Role)[keyof typeof PostUsers201Role]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsers201Role = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The created user
 */
export type PostUsers201 = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: PostUsers201Role
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The shape of a User object
 */
export type PostUsersBody = {
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
}

export const getSampleApi = () => {
  /**
   * You can use this endpoint to create users.
   * @summary Create user
   */
  const postUsers = <TData = AxiosResponse<PostUsers201>>(
    postUsersBody: PostUsersBody,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.post(`/users`, postUsersBody, options)
  }

  /**
   * Use this endpoint to get a list of users.
   * @summary Get users
   */
  const getUsers = <TData = AxiosResponse<GetUsers200Item[]>>(
    params?: GetUsersParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(`/users`, {
      ...options,
      params: { ...params, ...options?.params }
    })
  }

  /**
   * Fetch a single, specific user.
   * @summary Get user
   */
  const getUsersId = <TData = AxiosResponse<GetUsersId200>>(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(`/users/${id}`, options)
  }

  /**
   * Update a user's details.
   * @summary Update user
   */
  const patchUsersId = <TData = AxiosResponse<PatchUsersId200>>(
    id: string,
    patchUsersIdBody: PatchUsersIdBody,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.patch(`/users/${id}`, patchUsersIdBody, options)
  }

  /**
   * Delete a user. Can soft-delete or hard-delete.
   * @summary Delete user
   */
  const deleteUsersId = <TData = AxiosResponse<void>>(
    id: string,
    params?: DeleteUsersIdParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.delete(`/users/${id}`, {
      ...options,
      params: { ...params, ...options?.params }
    })
  }

  return { postUsers, getUsers, getUsersId, patchUsersId, deleteUsersId }
}
export type PostUsersResult = AxiosResponse<PostUsers201>
export type GetUsersResult = AxiosResponse<GetUsers200Item[]>
export type GetUsersIdResult = AxiosResponse<GetUsersId200>
export type PatchUsersIdResult = AxiosResponse<PatchUsersId200>
export type DeleteUsersIdResult = AxiosResponse<void>
