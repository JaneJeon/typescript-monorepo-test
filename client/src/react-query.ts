/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * SampleApi
 * Sample backend service
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios'
import { useQuery, useMutation } from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
export type DeleteUsersIdParams = {
  not?: unknown
  hardDelete?: string
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type PatchUsersId200Role =
  (typeof PatchUsersId200Role)[keyof typeof PatchUsersId200Role]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchUsersId200Role = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The updated user details
 */
export type PatchUsersId200 = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: PatchUsersId200Role
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type PatchUsersIdBodyRole =
  (typeof PatchUsersIdBodyRole)[keyof typeof PatchUsersIdBodyRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchUsersIdBodyRole = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The shape of a User object
 */
export type PatchUsersIdBody = {
  /** The username that is provided by the user. */
  name?: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: PatchUsersIdBodyRole
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type GetUsersId200Role =
  (typeof GetUsersId200Role)[keyof typeof GetUsersId200Role]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersId200Role = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The user with the matching id
 */
export type GetUsersId200 = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: GetUsersId200Role
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type GetUsers200ItemRole =
  (typeof GetUsers200ItemRole)[keyof typeof GetUsers200ItemRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsers200ItemRole = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The shape of a User object
 */
export type GetUsers200Item = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: GetUsers200ItemRole
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

export type GetUsersRole = (typeof GetUsersRole)[keyof typeof GetUsersRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersRole = {
  user: 'user',
  superuser: 'superuser'
} as const

export type GetUsersParams = {
  /**
   * The user ID (that is auto-generated from the backend).
   */
  id?: string
  /**
   * The username that is provided by the user.
   */
  name?: string
  /**
   * The role for the user. Note that superuser status can only be set by another superuser/admin.
   */
  role?: GetUsersRole
  /**
   * Deleted users will be marked with the `deactivated` flag. Do not set directly.
   */
  deactivated?: boolean
}

/**
 * The role for the user. Note that superuser status can only be set by another superuser/admin.
 */
export type PostUsers201Role =
  (typeof PostUsers201Role)[keyof typeof PostUsers201Role]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsers201Role = {
  user: 'user',
  superuser: 'superuser'
} as const

/**
 * The created user
 */
export type PostUsers201 = {
  /** An ISO timestamp string indicating when the object was created. Do not set directly. */
  createdAt: string
  /** An ISO timestamp string indicating when the object was updated. Do not set directly. */
  updatedAt: string
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
  /** The role for the user. Note that superuser status can only be set by another superuser/admin. */
  role?: PostUsers201Role
  /** Deleted users will be marked with the `deactivated` flag. Do not set directly. */
  deactivated?: boolean
}

/**
 * The shape of a User object
 */
export type PostUsersBody = {
  /** The user ID (that is auto-generated from the backend). */
  id: string
  /** The username that is provided by the user. */
  name: string
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

/**
 * You can use this endpoint to create users.
 * @summary Create user
 */
export const postUsers = (
  postUsersBody: PostUsersBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PostUsers201>> => {
  return axios.default.post(`/users`, postUsersBody, options)
}

export const getPostUsersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: PostUsersBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: PostUsersBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: PostUsersBody }
  > = props => {
    const { data } = props ?? {}

    return postUsers(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsers>>
>
export type PostUsersMutationBody = PostUsersBody
export type PostUsersMutationError = AxiosError<unknown>

/**
 * @summary Create user
 */
export const usePostUsers = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: PostUsersBody },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getPostUsersMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * Use this endpoint to get a list of users.
 * @summary Get users
 */
export const getUsers = (
  params?: GetUsersParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetUsers200Item[]>> => {
  return axios.default.get(`/users`, {
    ...options,
    params: { ...params, ...options?.params }
  })
}

export const getGetUsersQueryKey = (params?: GetUsersParams) =>
  [`/users`, ...(params ? [params] : [])] as const

export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>
>(
  params?: GetUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
    axios?: AxiosRequestConfig
  }
): UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal
  }) => getUsers(params, { ...(signal ? { signal } : {}), ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions }
}

export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>
export type GetUsersQueryError = AxiosError<unknown>

/**
 * @summary Get users
 */
export const useGetUsers = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>
>(
  params?: GetUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Fetch a single, specific user.
 * @summary Get user
 */
export const getUsersId = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetUsersId200>> => {
  return axios.default.get(`/users/${id}`, options)
}

export const getGetUsersIdQueryKey = (id: string) => [`/users/${id}`] as const

export const getGetUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData> & {
  queryKey: QueryKey
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUsersIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({
    signal
  }) => getUsersId(id, { ...(signal ? { signal } : {}), ...axiosOptions })

  return { queryKey, queryFn, enabled: !!id, ...queryOptions }
}

export type GetUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersId>>
>
export type GetUsersIdQueryError = AxiosError<unknown>

/**
 * @summary Get user
 */
export const useGetUsersId = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = AxiosError<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a user's details.
 * @summary Update user
 */
export const patchUsersId = (
  id: string,
  patchUsersIdBody: PatchUsersIdBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PatchUsersId200>> => {
  return axios.default.patch(`/users/${id}`, patchUsersIdBody, options)
}

export const getPatchUsersIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: PatchUsersIdBody },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: PatchUsersIdBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsersId>>,
    { id: string; data: PatchUsersIdBody }
  > = props => {
    const { id, data } = props ?? {}

    return patchUsersId(id, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PatchUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchUsersId>>
>
export type PatchUsersIdMutationBody = PatchUsersIdBody
export type PatchUsersIdMutationError = AxiosError<unknown>

/**
 * @summary Update user
 */
export const usePatchUsersId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: PatchUsersIdBody },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getPatchUsersIdMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * Delete a user. Can soft-delete or hard-delete.
 * @summary Delete user
 */
export const deleteUsersId = (
  id: string,
  params?: DeleteUsersIdParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/users/${id}`, {
    ...options,
    params: { ...params, ...options?.params }
  })
}

export const getDeleteUsersIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersId>>,
    TError,
    { id: string; params?: DeleteUsersIdParams },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsersId>>,
  TError,
  { id: string; params?: DeleteUsersIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsersId>>,
    { id: string; params?: DeleteUsersIdParams }
  > = props => {
    const { id, params } = props ?? {}

    return deleteUsersId(id, params, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUsersId>>
>

export type DeleteUsersIdMutationError = AxiosError<unknown>

/**
 * @summary Delete user
 */
export const useDeleteUsersId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersId>>,
    TError,
    { id: string; params?: DeleteUsersIdParams },
    TContext
  >
  axios?: AxiosRequestConfig
}) => {
  const mutationOptions = getDeleteUsersIdMutationOptions(options)

  return useMutation(mutationOptions)
}
